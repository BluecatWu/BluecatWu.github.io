{"title":"JS常见问题总结","slug":"7","date":"2017-07-14T12:12:30.000Z","updated":"2017-08-12T06:01:12.000Z","comments":true,"excerpt":"<ul>\n<li><p>Q：解释下事件代理。</p>\n<p>A: 当我们需要对很多元素添加事件的时候，可以通过将事件添加到它们的父节点而将事件委托给父节点来触发处理函数。这主要得益于浏览器的事件冒泡机制。</p>\n</li>\n</ul>","content":"<ul>\n<li><p>Q：解释下事件代理。</p>\n<p>A: 当我们需要对很多元素添加事件的时候，可以通过将事件添加到它们的父节点而将事件委托给父节点来触发处理函数。这主要得益于浏览器的事件冒泡机制。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<pre><code>var delegate = function(client, clientMethod) {\n    return function() {\n        return clientMethod.apply(client, arguments);\n    }\n}\n\nvar agentMethod = delegate (client, clientMethod);\nagentMethod();\n</code></pre><p>  相关阅读：</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/owenChen/archive/2013/02/18/2915521.html\" target=\"_blank\" rel=\"external\">JavaScript事件代理和委托（Delegation）</a></li>\n<li><a href=\"http://www.cnblogs.com/owenChen/archive/2013/02/18/2915521.html\" target=\"_blank\" rel=\"external\">事件代理</a></li>\n<li><a href=\"http://tangram.baidu.com/article/138\" target=\"_blank\" rel=\"external\">事件代理的应用</a></li>\n</ul>\n<ul>\n<li>Q: 解释下 JavaScript 中 <code>this</code> 是如何工作的。</li>\n</ul>\n<p>  A: <code>this</code> 在 JavaScript 中主要由以下五种使用场景。</p>\n<ul>\n<li>作为函数调用，<code>this</code> 绑定全局对象，浏览器环境全局对象为 window 。<ul>\n<li>内部函数内部函数的 <code>this</code> 也绑定全局对象，应该绑定到其外层函数对应的对象上，这是 JavaScript的缺陷，用<code>that</code>替换。</li>\n</ul>\n</li>\n<li>作为构造函数使用，<code>this</code> 绑定到新创建的对象。</li>\n<li>作为对象方法使用，<code>this</code> 绑定到该对象。</li>\n<li><p>使用<code>apply</code>或<code>call</code>调用 <code>this</code> 将会被显式设置为函数调用的第一个参数。</p>\n<p>参考阅读：</p>\n<ul>\n<li><a href=\"http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/#ibm-pcon\" target=\"_blank\" rel=\"external\">深入浅出 JavaScript 中的 this</a></li>\n<li><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/#function.this\" target=\"_blank\" rel=\"external\">this 的工作原理</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Q: 解释下原型继承的原理。</p>\n<p>A:原型继承的基础是原型链查找。<br>原型链查找基本概念：</p>\n<ol>\n<li>每一个函数 F 都有一个原型对象（prototype）F.prototype</li>\n<li>每一个函数都可以通过 new 关键字化身成为一个类构造函数，new F 会产生一个对象 O</li>\n<li>在调用对象的某个属性或者方法，比如 <a href=\"http://O.xxx\" target=\"_blank\" rel=\"external\">http://O.xxx</a> 的时候，会首先查找对象自身是否有这个方法或者属性，如果没找到就会去对象的构造函数的原型对象中查找（注意有两个定语），也就是查找 O 的构造函数 F 的原型对象 <a href=\"http://F.prototype.xxx\" target=\"_blank\" rel=\"external\">http://F.prototype.xxx</a></li>\n<li>F.prototype 也是一个对象，查找 <a href=\"http://F.prototype.xxx\" target=\"_blank\" rel=\"external\">http://F.prototype.xxx</a> 的时候会重复第 3 步的过程</li>\n</ol>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/d2742610ec30#\" target=\"_blank\" rel=\"external\">深入理解javascript原型继承</a></li>\n<li><a href=\"http://www.ituring.com.cn/article/56184\" target=\"_blank\" rel=\"external\">JavaScript原型继承工作原理</a></li>\n<li><a href=\"http://javascript.crockford.com/prototypal.html\" target=\"_blank\" rel=\"external\">Prototypal Inheritance in JavaScript</a></li>\n</ul>\n</li>\n<li><p>Q: 你是如何测试JavaScript代码的？</p>\n</li>\n<li><p>A: AMD vs. CommonJS？</p>\n<p>Q: 可参考: <a href=\"http://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs</a></p>\n</li>\n<li><p>Q: 什么是哈希表？</p>\n<p>A: 哈希表是根据关键字（Key value）而直接访问在内存存储位置的数据结构。也就是说，它通过把键值通过一个函数的计算，映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做散列表。</p>\n</li>\n<li><p>Q: 解释下为什么接下来这段代码不是 IIFE(立即调用的函数表达式)：<code>function foo(){ }();</code>.</p>\n<ul>\n<li>要做哪些改动使它变成 IIFE?</li>\n</ul>\n<p>A: 可参考 <a href=\"http://roshanca.com/2014/web-develop-styleguide-javascript/\" target=\"_blank\" rel=\"external\">前端编码风格规范之 JavaScript 规范</a></p>\n<p>总是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，用以创建独立隔绝的定义域。这一举措可防止全局命名空间被污染。</p>\n<p>IIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。</p>\n<p>  不推荐</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var x = 10,</div><div class=\"line\">    y = 100;</div><div class=\"line\"></div><div class=\"line\">// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this</div><div class=\"line\">// will be stored in the window object. This is very unclean and needs to be avoided.</div><div class=\"line\">console.log(window.x + &apos; &apos; + window.y);</div></pre></td></tr></table></figure>\n<p>  推荐</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// We declare a IIFE and pass parameters into the function that we will use from the global space</div><div class=\"line\">(function(log, w, undefined)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">  var x = 10,</div><div class=\"line\">      y = 100;</div><div class=\"line\"></div><div class=\"line\">  // Will output &apos;true true&apos;</div><div class=\"line\">  log((w.x === undefined) + &apos; &apos; + (w.y === undefined));</div><div class=\"line\"></div><div class=\"line\">&#125;(window.console.log, window));</div></pre></td></tr></table></figure>\n<p>  IIFE（立即执行的函数表达式）:无论何时，想要创建一个新的封闭的定义域，那就用 IIFE。它不仅避免了干扰，也使得内存在执行完后立即释放。</p>\n<p>  所有脚本文件建议都从 IIFE 开始。</p>\n<p>  立即执行的函数表达式的执行括号应该写在外包括号内。虽然写在内还是写在外都是有效的，但写在内使得整个表达式看起来更像一个整体，因此推荐这么做。</p>\n<p>  不推荐</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;&#125;)();</div></pre></td></tr></table></figure>\n<p>  推荐</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;&#125;());</div></pre></td></tr></table></figure>\n<p>  so，用下列写法来格式化你的 IIFE 代码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">  // Code goes here</div><div class=\"line\"></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>  如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function($, w, d)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">  $(function() &#123;</div><div class=\"line\">    w.alert(d.querySelectorAll(&apos;div&apos;).length);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;(jQuery, window, document));</div></pre></td></tr></table></figure>\n</li>\n<li><p>Q: 描述以下变量的区别：<code>null</code>，<code>undefined</code> 或 <code>undeclared</code>？</p>\n<ul>\n<li>该如何检测它们？</li>\n</ul>\n</li>\n</ul>\n<p>  A: <code>undefined</code>是Js语言类型，而<code>undeclared</code>是一种Js语法错误。在JavaScript中，有两个表示‘空’的值<code>undefined</code>和<code>null</code>，<code>undefined</code>是一个值为<code>undefined</code> 的类型。JavaScript语言也定义了一个全局变量，它的值是 <code>undefined</code>，这个变量也被称为<code>undefined</code>。 但是这个变量不是一个常量，也不是一个关键字。这意味着它的值可以轻易被覆盖。为了避免可能对<code>undefined</code>值的改变，一个常用的技巧是使用一个传递到匿名包装器的额外参数。在调用时，这个参数不会获取任何值。如下例子：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var undefined = 123;</div><div class=\"line\">(function(something, foo, undefined) &#123;</div><div class=\"line\">// 局部作用域里的 undefined 变量重新获得了 `undefined` 值</div><div class=\"line\">&#125;)(&apos;Hello World&apos;, 42);</div></pre></td></tr></table></figure>\n<pre><code>待修改。\n</code></pre><ul>\n<li><a href=\"http://stackoverflow.com/questions/6429225/javascript-null-or-undefined\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/6429225/javascript-null-or-undefined</a></li>\n<li><a href=\"http://www.zhihu.com/question/19966545\" target=\"_blank\" rel=\"external\">http://www.zhihu.com/question/19966545</a></li>\n</ul>\n<ul>\n<li><p>什么是闭包，如何使用它，为什么要使用它？</p>\n</li>\n<li><p>请举出一个匿名函数的典型用例？</p>\n</li>\n<li><p>解释 “JavaScript 模块模式” 以及你在何时使用它。</p>\n<ul>\n<li>如果有提到无污染的命名空间，可以考虑加分。</li>\n<li>如果你的模块没有自己的命名空间会怎么样？</li>\n</ul>\n</li>\n<li><p>你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？</p>\n</li>\n<li><p>Q: 请指出 JavaScript 宿主对象和原生对象的区别？</p>\n<p> A: 宿主对象是指DOM和BOM。原生对象是Object、Function、Array、String、Boolean、Number、Date、RegExp、Error、Math等对象。</p>\n</li>\n<li><p>Q:指出下列代码的区别：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> person = Person();</div><div class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure>\n<p>A: 第一行是定义了一个函数 Person()；第二行代码是执行函数 Person() 并将其返回值复制给变量 person，如果 Person() 是一个构造器函数的话，新的对象将不会被创建，并且 this 将被绑定到全局对象上；第三行代码是用构造函数 Person() 构造一个实例对象 person。</p>\n</li>\n</ul>\n<ul>\n<li><p>Q:<code>.call</code> 和 <code>.apply</code> 的区别是什么？</p>\n<p>A: <a href=\"http://www.cnblogs.com/fighting_cp/archive/2010/09/20/1831844.html\" target=\"_blank\" rel=\"external\">关于javascript中apply()和call()方法的区别</a></p>\n</li>\n<li><p>请解释 <code>Function.prototype.bind</code> 的作用？</p>\n</li>\n<li><p>你何时优化自己的代码？</p>\n</li>\n<li><p>你能解释一下 JavaScript 中的继承是如何工作的吗？</p>\n</li>\n<li><p>在什么时候你会使用 <code>document.write()</code>？</p>\n<ul>\n<li>大多数生成的广告代码依旧使用 <code>document.write()</code>，虽然这种用法会让人很不爽。</li>\n</ul>\n</li>\n<li><p>请指出浏览器特性检测，特性推断和浏览器 UA 字符串嗅探的区别？</p>\n</li>\n<li><p>请尽可能详尽的解释 AJAX 的工作原理。</p>\n<p>Q: Ajax 全称为 Asynchronous JavaScript and XML（异步 JavaScript 和 XML），是一种创建交互式网页应用的网页开发技术。<br>  Ajax 的原理简单来说通过 XmlHttpRequest 对象来向服务器发异步请求，从服务器获得数据，然后用 JavaScript来操作 DOM 而更新页面。这其中最关键的一步就是从服务器获得请求数据。</p>\n<p>  以往我们浏览网页的原理是由 Client 向 Server 提交页面申请，再由 Server 将申请通过 HTTP 传回给 Client 生成浏览页面：</p>\n<p>  <img src=\"http://yianbin.qiniudn.com/fe-ajax-a.png\" alt=\"Ajax 原理图\"></p>\n<p>  使用 Ajax 后的工作原理如下图，可见通过 Ajax 在用户交互方面有了很大改进，用户可以不用为提交了 Form 而长时间等待服务器应答，而且通过 Ajax 也可以开发出华丽的 Web 交互页面。</p>\n<p>  <img src=\"http://yianbin.qiniudn.com/fe-ajax-b.png\" alt=\"Ajax 原理图\"></p>\n<p>  转自：<a href=\"https://github.com/infp/Front-end-Interview/blob/master/source/javascript.md#21%E8%AF%B7%E5%B0%BD%E5%8F%AF%E8%83%BD%E8%AF%A6%E5%B0%BD%E7%9A%84%E8%A7%A3%E9%87%8A-ajax-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\" target=\"_blank\" rel=\"external\">AJAX 的工作原理</a></p>\n</li>\n<li><p>请解释 JSONP 的工作原理，以及它为什么不是真正的 AJAX。</p>\n</li>\n<li><p>你使用过 JavaScript 模板系统吗？</p>\n<ul>\n<li>如有使用过，请谈谈你都使用过哪些库，比如 Mustache.js，Handlebars 等等。</li>\n</ul>\n</li>\n<li><p>请解释变量声明提升。</p>\n</li>\n<li><p>请描述下事件冒泡机制。</p>\n</li>\n<li><p>“attribute” 和 “property” 的区别是什么？</p>\n</li>\n<li><p>为什么扩展 JavaScript 内置对象不是好的做法？</p>\n</li>\n<li><p>为什么扩展 JavaScript 内置对象是好的做法？</p>\n</li>\n<li><p>请指出 document load 和 document ready 两个事件的区别。</p>\n</li>\n<li><p>Q: <code>==</code> 和 <code>===</code> 有什么不同？</p>\n<p>A: <code>==</code>（相等运算法），<code>===</code>（严格相等运算符） JavaScript 对象的比较是引用的比较，非值的比较，对象和其本身相等，和其他任何对象不相等。 <code>===</code> 首先计算其操作数的值，然后比较，比较过程无任何类型转换。 <code>==</code> 如果两个操作数不是同一类型的，则相等运算符进行一些类型转换进行比较。 <code>==</code> 这里截取 <a href=\"http://dorey.github.io/JavaScript-Equality-Table\" target=\"_blank\" rel=\"external\">JavaScript 相等表格</a>上的的两张图片让大家更为直观的感受下。</p>\n<p><img src=\"http://paddingme.qiniudn.com/1396461120383-2.png\" alt=\"\"></p>\n<p><img src=\"http://paddingme.qiniudn.com/1396464279990-1.png\" alt=\"\"></p>\n<p>引用下<a href=\"http://weibo.com/wintercn\" target=\"_blank\" rel=\"external\">温特大大</a>的总结就是：<strong>只要记住 <code>null</code> 只和<code>undefined</code> 相等，有 <code>number</code> 都转 <code>number</code>，有 <code>boolean</code> 也转 <code>number</code>，有 <code>string</code> 都转 <code>string</code>，对象互相不等，<code>NaN</code> 互相不等就可以了</strong>。</p>\n</li>\n<li><p>你如何从浏览器的 URL 中获取查询字符串参数。</p>\n</li>\n<li><p>请解释一下 JavaScript 的同源策略。</p>\n</li>\n<li><p>请描述一下 JavaScript 的继承模式。</p>\n</li>\n<li><p>如何实现下列代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].duplicator(); <span class=\"comment\">// [1,2,3,4,5,1,2,3,4,5]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>描述一种 JavaScript 中实现 memoization(避免重复运算)的策略。</p>\n</li>\n<li><p>什么是三元表达式？“三元” 表示什么意思？</p>\n</li>\n<li><p>函数的参数元是什么？</p>\n</li>\n<li><p>什么是 <code>&quot;use strict&quot;;</code> ? 使用它的好处和坏处分别是什么？</p>\n</li>\n</ul>\n","categories":[{"name":"知识总结","path":"api/categories/知识总结.json"}],"tags":[{"name":"面试题","path":"api/tags/面试题.json"},{"name":"JS","path":"api/tags/JS.json"}]}