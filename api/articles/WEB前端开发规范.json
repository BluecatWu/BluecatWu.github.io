{"title":"WEB前端开发规范","slug":"WEB前端开发规范","date":"2016-08-13T11:40:31.000Z","updated":"2017-08-12T05:59:40.000Z","comments":true,"excerpt":"","content":"<h1 id=\"Web前端开发规范文档\"><a href=\"#Web前端开发规范文档\" class=\"headerlink\" title=\"Web前端开发规范文档\"></a>Web前端开发规范文档</h1><h2 id=\"规范目的\"><a href=\"#规范目的\" class=\"headerlink\" title=\"规范目的:\"></a>规范目的:</h2><ul>\n<li>使开发流程更加规范化。</li>\n</ul>\n<h1 id=\"通用规范：\"><a href=\"#通用规范：\" class=\"headerlink\" title=\"通用规范：\"></a>通用规范：</h1><blockquote>\n<ul>\n<li>TAB键用两个空格代替（WINDOWS下TAB键占四个空格，LINUX下TAB键占八个空格）。</li>\n<li>CSS样式属性或者JAVASCRIPT代码后加“;”方便压缩工具“句”。</li>\n<li>文件内容编码均统一为UTF-8。</li>\n<li>CSS、JAVASCRIPT中的非注释类中文字符须转换成unicode编码使用,以避免编码错误时乱码显示。</li>\n</ul>\n</blockquote>\n<h1 id=\"文件规范：\"><a href=\"#文件规范：\" class=\"headerlink\" title=\"文件规范：\"></a>文件规范：</h1><blockquote>\n<ul>\n<li>文件名用英文单词，多个单词用驼峰命名法。</li>\n<li><p>一些浏览器会将含有这些词的作为广告拦截，文件命名、ID、CLASS等所有命名避免以上词汇。</p>\n<pre><code>ad`、`ads`、`adv`、`banner`、`sponsor`、`gg`、`guangg`、`guanggao`等\n</code></pre></li>\n</ul>\n</blockquote>\n<h1 id=\"html书写规范：\"><a href=\"#html书写规范：\" class=\"headerlink\" title=\"html书写规范：\"></a>html书写规范：</h1><blockquote>\n<ul>\n<li><p>为每个HTML页面的第一行添加标准模式（standardmode）的声明，确保在每个浏览器中拥有一致的展现。</p>\n</li>\n<li><p>&lt;!DOCTYPE html&gt;文档类型声明统一为HTML5声明类型，编码统一为UTF-8。 &lt;meta charset=”UTF-8”&gt;<head>中添加信息。</head></p>\n<pre><code>&lt;meta name=&quot;author&quot; content=&quot;smile@kang.cool&quot;&gt;//作者\n&lt;meta name=&quot;description&quot; content=&quot;hello&quot;&gt;//网页描述\n&lt;meta name=&quot;keywords&quot; content=&quot;a,b,c&quot;&gt;//关键字,“，”分隔\n&lt;meta http-equiv=&quot;expires&quot; content=&quot;Wed, 26 Feb 1997 08：21：57 GMT&quot;&gt;//设定网页的到期时间。一旦网页过期，必须到服务器上重新调阅\n&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt;//禁止浏览器从本地机的缓存中调阅页面内容\n&lt;meta http-equiv=&quot;Window-target&quot; content=&quot;_top&quot;&gt;//用来防止别人在框架里调用你的页面\n&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;5;URL=http://kahn1990.com/&quot;&gt;//跳转页面，5指时间停留5秒 网页搜索机器人向导。用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引\n&lt;meta name=&quot;robots&quot; content=&quot;none&quot;&gt;//content的参数有all,none,index,noindex,follow,nofollow，默认是all\n&lt;link rel=&quot;Shortcut Icon&quot; href=&quot;favicon.ico&quot;&gt;//收藏图标\n&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache, must-revalidate&quot;&gt;//网页不会被缓存\n</code></pre></li>\n<li><p>IE支持通过特定&lt;meta&gt;标签来确定绘制当前页面所应该采用的IE版本。除非有强烈的特殊需求，否则最好是设置为edge<br>mode ，从而通知IE采用其所支持的最新的模式。</p>\n</li>\n</ul>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n\n<ul>\n<li><p>非特殊情况下CSS样式文件外链至HEAD之间，JAVASCRIPT文件外链至页面底部。</p>\n<pre><code>&lt;!DOCTYPE html&gt;;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;css/main.css&quot;&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;css/main.css&quot;&gt;\n    &lt;/head&gt;\n        &lt;body&gt;\n        &lt;!-- 逻辑代码 --&gt;\n        &lt;!-- 逻辑代码底部 --&gt;\n        &lt;script src=&quot;lib/jquery/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li>\n</ul>\n<p>引入JAVASCRIPT库文件，文件名须包含库名称及版本号及是否为压缩版。<br><code>jQuery-1.8.3.min.js</code></p>\n<p>引入JAVASCRIPT插件, 文件名格式为库名称+.+插件名称。<br><code>jQuery.cookie.js</code></p>\n<ul>\n<li><p>HTML属性应当按照以下给出的顺序依次排列，来确保代码的易读性。</p>\n<pre><code>class\nid 、 name\ndata-_\nsrc、for、 type、 href\ntitle、alt\naria-_、 role\n</code></pre></li>\n</ul>\n<p>编码均遵循XHTML标准,<br>标签、属性、属性命名由小写英文、数字和_组成，且所有标签必须闭合，属性值必须用双引号””,<br>避免使用中文拼音尽量简易并要求语义化。</p>\n<pre><code>CLASS --&gt; nHeadTitle --&gt; CLASS遵循小驼峰命名法（little camel-case）\n ID --&gt; n_head_title --&gt; ID遵循名称+_\n NAME --&gt; N_Head_Title --&gt; NAME属性命名遵循首个字母大写+_\n&lt;div class=&quot;nHeadTitle&quot; id=&quot;n_head_title&quot; name=&quot;N_Head_Title&quot;&gt;&lt;/div&gt;\n</code></pre><p>当JAVASCRIPT获取单个元素时，通常使用document.getElementById来获取dom元素，document.getElementById兼容所有浏览器，但IE浏览器会混淆元素的ID和NAME属性，所以要区分ID和NAME命名。</p>\n<blockquote>\n<p>&lt;input type=”text” name=”test”&gt;</p>\n<p>&lt;div id=”test”&gt;&lt;/div&gt;</p>\n<p>&lt;button onclick=”alert(document.getElementById(‘test’).tagName)”&gt;&lt;/button&gt;<br>&lt;!– ie6下为INPUT –&gt;</p>\n</blockquote>\n<p>特殊符号应使用转意符。</p>\n<blockquote>\n<p>&lt;    –&gt;    &lt;<br>   –&gt;    &gt;<br>空格  –&gt;</p>\n</blockquote>\n<ul>\n<li>含有描述性表单元素（INPUT，TEXTAREA）添加LABEL。<br>&lt;p&gt;<br>&lt;label for=”test”&gt;测试&lt;/label&gt;<br>&lt;input type=”text” id=”test” /&gt;<br>&lt;/p&gt;<br>多用无兼容性问题的HTML内置标签,<br>比如SPAN、EM、STRONG、OPTGROUP、LABEL等,需要自定义HTML标签属性时，首先考虑是否存在已有的合适标签可替换，如果没有,<br>可使用须以“data-”为前缀来添加自定义属性，避免使用其他命名方式。</li>\n<li>语义化HTML。</li>\n<li>尽可能减少&lt;DIV&gt;嵌套。</li>\n<li>书写链接地址时避免重定向。</li>\n<li>href=”<a href=\"http://www.kahn1990.com/\" target=\"_blank\" rel=\"external\">http://www.kahn1990.com/</a>“ //即在URL地址后面加“/”</li>\n<li>HTML中对于属性的定义，确保全部使用双引号，绝不要使用单引号</li>\n</ul>\n</blockquote>\n<h1 id=\"css书写规范：\"><a href=\"#css书写规范：\" class=\"headerlink\" title=\"css书写规范：\"></a>css书写规范：</h1><blockquote>\n<ul>\n<li><p>为了欺骗W3C的验证工具,可将代码分为两个文件，一个是针对所有浏览器,一个只针对IE。即将所有符合W3C的代码写到一个文件中,而一些IE中必须而又不能通过W3C验证的代码（如:<br>cursor:hand;）放到另一个文件中，再用下面的方法导入。</p>\n<blockquote>\n<p>&lt;!– 放置所有浏览器样式–&gt;<br>&lt;link rel=”stylesheet” type=”text/css” href=””&gt;<br>&lt;!– 只放置IE必须，而不能通过w3c的–&gt;<br>&lt;!–[if IE]<br>  &lt;link rel=”stylesheet” href=””&gt;<br>&lt;![endif]–&gt;</p>\n</blockquote>\n</li>\n<li><p>CSS样式新建或修改尽量遵循以下原则。</p>\n<blockquote>\n<p>根据新建样式的适用范围分为三级：全站级、产品级、页面级。<br>尽量通过继承和层叠重用已有样式。<br>不要轻易改动全站级CSS。改动后，要经过全面测试。</p>\n</blockquote>\n</li>\n<li><p>CSS属性显示顺序。</p>\n</li>\n</ul>\n<blockquote>\n<p>显示属性<br>元素位置<br>元素属性<br>元素内容属性</p>\n</blockquote>\n<ul>\n<li><p>CSS书写顺序。</p>\n<blockquote>\n<p>.header {<br>/<em> 显示属性 </em>/</p>\n<pre><code>display || visibility\nlist-style\nposition top || right || bottom || left\nz-index\nclear\nfloat\n</code></pre><p>/<em> 自身属性 </em>/</p>\n<pre><code>width max-width || min-width\nheight max-height || min-height\noverflow || clip\nmargin\npadding\noutline\nborder\nbackground\n</code></pre><p>/<em> 文本属性 </em>/</p>\n<pre><code>color\nfont\ntext-overflow\ntext-align\ntext-indent\nline-height\nwhite-space\nvertical-align\ncursor\ncontent\n};\n</code></pre></blockquote>\n</li>\n<li><p>兼容多个浏览器时，将标准属性写在底部。</p>\n<blockquote>\n<p>-moz-border-radius: 15px; /<em> Firefox </em>/<br>-webkit-border-radius: 15px; /<em> Safari和Chrome </em>/<br>border-radius: 15px; /<em> Opera 10.5+, 以及使用了IE-CSS3的IE浏览器 </em>//标准属性</p>\n</blockquote>\n</li>\n<li><p>使用选择器时，命名比较短的词汇或者缩写的不允许直接定义样式。</p>\n<blockquote>\n<p>.hd,.bd,.td{};//如这些命名</p>\n</blockquote>\n</li>\n<li><p>可用上级节点进行限定。</p>\n<blockquote>\n<p>.recommend-mod .hd</p>\n</blockquote>\n</li>\n<li><p>多选择器规则之间换行，即当样式针对多个选择器时每个选择器占一行。</p>\n<blockquote>\n<p>button.btn,<br>input.btn,<br>input[type=”button”] {…};</p>\n</blockquote>\n</li>\n<li><p>优化CSS选择器。</p>\n<blockquote>\n<p><code>#header a { color: #444; };</code>/<em>CSS选择器是从右边到左边进行匹配</em>/</p>\n</blockquote>\n</li>\n</ul>\n<p>浏览器将检查整个文档中的所有链接和每个链接的父元素，并遍历文档树去查找ID为header的祖先元素，如果找不到header将追溯到文档的根节点，解决方法如下。</p>\n<blockquote>\n<p>避免使用通配规则和相邻兄弟选择符、子选择符,、后代选择符、属性选择符等选择器<br>不要限定id选择符，如div#header（提权的除外）<br>不要限定类选择器，如ul.recommend（提权的除外）<br>不要使用 ul li a 这样长的选择符<br>避免使用标签子选择符，如#header &gt; li &gt; a</p>\n</blockquote>\n<ul>\n<li>使用z-index属性尽量z-index的值不要超过150（通用组的除外），页面中的元素内容的z-index不能超过10（提示框等模块除外但维持在150以下），不允许直接使用（999~9999）之间大值。</li>\n<li>尽量避免使用CSS Hack。<blockquote>\n<p>`property:value; /<em> 所有浏览器 </em>/<br>+property:value; /<em> IE7 </em>/<br><em>property:value; /</em> IE6 _/<br><em>property:value; /</em> IE6/7 <em>/<br>property:value\\9; /</em> IE6/7/8/9，即所有IE浏览器 <em>/<br> html selector { … }; /</em> IE6 */</p>\n<p><em>:first-child+html selector { … }; /</em> IE7 <em>/<br>html&gt;body selector { … }; /</em> 非IE6 <em>/<br>@-moz-document url-prefix() { … }; /</em> firefox <em>/<br>@media all and (-webkit-min-device-pixel-ratio:0) { … }; /</em> saf3+/chrome1+ <em>/<br>@media all and (-webkit-min-device-pixel-ratio:10000),not all and (-webkit-min-device-pixel-ratio:0) { … }; /</em> opera <em>/<br>@media screen and (max-device-width: 480px) { … }; /</em> iPhone/mobile webkit */</p>\n</blockquote>\n</li>\n</ul>\n<p>避免使用低效的选择器。</p>\n<p>&gt;<br><code>body &gt; * {…};</code><br><code>ul &gt; li &gt; a {…};</code><br><code>#footer &gt; h3 {…};</code><br><code>ul#top_blue_nav {…};</code><br><code>#searbar span.submit a { … };</code> /<em> 反面示例 </em>/</p>\n<ul>\n<li>六个不要三个避免一个使用。<blockquote>\n<p>不要在标签上直接写样式<br>不要在CSS中使用expression<br>不要在CSS中使用@import<br>不要在CSS中使用!important<br>不要在CSS中使用“<em>”选择符<br>不要将CSS样式写为单行<br>避免使用filter<br>避免使用行内（inline）样式<br>避免使用“</em>”设置{margin: 0; padding: 0;}<br>使用after或overflow的方式清浮动</p>\n</blockquote>\n</li>\n</ul>\n<p>减少使用影响性能的属性。</p>\n<blockquote>\n<p><code>position:absolute;</code><br><code>float:left;</code>//如这些定位或浮动属性<br>减少在CSS中使用滤镜表达式和图片repeat,</p>\n</blockquote>\n<p>尤其在body当中,渲染性能极差, 如果需要用repeat的话,<br>图片的宽或高不能少于8px。</p>\n</blockquote>\n<h1 id=\"javaScript书写规范：\"><a href=\"#javaScript书写规范：\" class=\"headerlink\" title=\"javaScript书写规范：\"></a>javaScript书写规范：</h1><blockquote>\n<ul>\n<li>命名规范。</li>\n</ul>\n<p>常量名<br>    全部大写并单词间用下划线分隔<br>    如：CSS_BTN_CLOSE、TXT_LOADING</p>\n<p>对象的属性或方法名<br>    小驼峰式（little camel-case）<br>    如：init、bindEvent、updatePosition<br>    示例：Dialog.prototype = {<br>                init: function () {},<br>                bindEvent: function () {},<br>                updatePosition: function () {}<br>                …<br>                };<br>类名（构造器）<br>    –&gt;小驼峰式但首字母大写<br>    –&gt;如：Current、DefaultConfig<br>函数名<br>    –&gt;小驼峰式<br>    –&gt;如：current()、defaultConfig()<br>变量名<br>    –&gt;小驼峰式<br>    –&gt;如：current、defaultConfig<br>私有变量名<br>    –&gt;小驼峰式但需要用_开头<br>    –&gt;如：_current、_defaultConfig<br>变量名的前缀<br>    –&gt;续</p>\n<ul>\n<li><p>代码格式。</p>\n<blockquote>\n<p>“()”前后需要跟空格<br>“=”前后需要跟空格<br>“,”后面需要跟空格<br>JSON对象需格式化对象参数<br>if、while、for、do语句的执行体用”{}”括起来</p>\n</blockquote>\n</li>\n<li><p>“{}”格式如下。</p>\n<blockquote>\n<p>if (a==1) {</p>\n<pre><code>//代码\n</code></pre><p>};</p>\n</blockquote>\n</li>\n<li><p>避免额外的逗号。</p>\n<blockquote>\n<p>var arr = [1,2,3,];</p>\n</blockquote>\n</li>\n</ul>\n<p>for-in循环体中必须用hasOwnProperty方法检查成员是否为自身成员，避免来自原型链上的污染。</p>\n<ul>\n<li><p>长语句可考虑断行。</p>\n<blockquote>\n<p>TEMPL_SONGLIST.replace(‘{TABLE}’, da[‘results’])</p>\n<pre><code>.replace(&apos;{PREV_NUM}&apos;, prev)\n.replace(&apos;{NEXT_NUM}&apos;, next)\n.replace(&apos;{CURRENT_NUM}&apos;, current)\n.replace(&apos;{TOTAL_NUM}&apos;, da.page_total);\n</code></pre></blockquote>\n</li>\n<li><p>为了避免和JSLint的检验机制冲突，“.”或“+”这类操作符放在行尾。</p>\n<blockquote>\n<p>TEMPL_SONGLIST.replace(‘{TABLE}’, da[‘results’]).</p>\n<pre><code>replace(&apos;{PREV_NUM}&apos;, prev).\nreplace(&apos;{NEXT_NUM}&apos;, next).\nreplace(&apos;{CURRENT_NUM}&apos;, current).\nreplace(&apos;{TOTAL_NUM}&apos;, da.page_total);\n</code></pre></blockquote>\n</li>\n<li><p>如果模块代码中，使用其它全局变量想跳过JSLint的检查，可以在该文件中加入/<em>global</em>/声明。</p>\n<blockquote>\n<p>/<em>global alert: true, console: true, top: true, setTimeout: true </em>/</p>\n</blockquote>\n</li>\n<li><p>使用严格的条件判断符。用===代替==，用!==代替!=，避免掉入==造成的陷阱<br>在条件判断时，这样的一些值表示false。</p>\n<blockquote>\n<p>null<br>undefined与null相等<br>字符串’’<br>数字0<br>NaN</p>\n</blockquote>\n</li>\n<li><p>在==时，则会有一些让人难以理解的陷阱。</p>\n<blockquote>\n<p>(function () {</p>\n<pre><code>var undefined;\nundefined == null; // true\n1 == true; //true\n2 == true; // false\n0 == false; // true\n0 == &apos;&apos;; // true\nNaN == NaN;// false\n[] == false; // true\n[] == ![]; // true\n</code></pre><p>})();</p>\n</blockquote>\n</li>\n<li><p>对于不同类型的 == 判断，有这样一些规则，顺序自上而下：</p>\n<blockquote>\n<p>undefined与null相等<br>一个是number一个是string时，会尝试将string转换为number<br>尝试将boolean转换为number<br>0或1<br>尝试将Object转换成number或string</p>\n</blockquote>\n</li>\n</ul>\n<p>而这些取决于另外一个对比量，即值的类型，所以对于0、空字符串的判断，建议使用===<br>。===会先判断两边的值类型，类型不匹配时为false。</p>\n<ul>\n<li>下面类型的对象不建议用new构造。<blockquote>\n<p>new Number<br>new String<br>new Boolean<br>new Object //用{}代替<br>new Array //用[]代替</p>\n</blockquote>\n</li>\n</ul>\n<p>引用对象成员用obj.prop代替obj[“prop”]，除非属性名是变量。</p>\n<ul>\n<li><p>从number到string的转换。</p>\n<blockquote>\n<p>/<strong> 推荐写法*/<br>var a = 1;<br>typeof(a); //“number”<br>console.log(a); //1<br>var aa=a+’’;<br>typeof(aa); //“string”<br>console.log(aa); //‘1’<br>/</strong> 不推荐写法*/<br>new String(a)或a.toString()</p>\n</blockquote>\n</li>\n<li><p>从string到number的转换，使用parseInt，必须显式指定第二个参数的进制。</p>\n<blockquote>\n<p>/<em>* 推荐写法</em>/<br>var a = ‘1’;<br>var aa = parseInt(a,10);<br>typeof(a); //“string”<br>console.log(a); //‘1’<br>typeof(aa); //“number”<br>console.log(aa); //1</p>\n</blockquote>\n</li>\n<li><p>从float到integer的转换。</p>\n<blockquote>\n<p>/<strong> 推荐写法*/<br>Math.floor/Math.round/Math.ceil<br>/</strong> 不推荐写法*/<br>parseInt</p>\n</blockquote>\n</li>\n<li><p>字符串拼接应使用数组保存字符串片段，使用时调用join方法。避免使用+或+=的方式拼接较长的字符串，每个字符串都会使用一个小的内存片段，过多的内存片段会影响性能。</p>\n<blockquote>\n<p>/<em>*推荐的拼接方式array的push、join</em>/<br>var str=[],</p>\n<pre><code>list=[&apos;测试A&apos;,&apos;测试B&apos;];\n</code></pre><p>for (var i=0 , len=list.length; i &lt; len; i++) {</p>\n<pre><code>str.push( &apos;&amp;lt;div&amp;gt;&apos;+ list[i] + &apos;&amp;lt;/div&amp;gt;&apos;);\n</code></pre><p>};<br>console.log(str.join(‘’)); //&lt;div&gt;测试A&lt;/div&gt;&lt;div&gt;测试B&lt;/div&gt;<br>/<em>* 不推荐的拼接方式+=</em>/<br>var str = ‘’,</p>\n<pre><code>list=[&apos;测试A&apos;,&apos;测试B&apos;];\n</code></pre><p>for (var i = 0, len = list.length; i&lt; len; i++) {</p>\n<pre><code>str+=&apos;&amp;lt;div&amp;gt;&apos; + list[i] + &apos;&amp;lt;/div&amp;gt;&apos;;\n</code></pre><p>};<br>console.log(str); //&lt;div&gt;测试A&lt;/div&gt;&lt;div&gt;测试B&lt;/div&gt;</p>\n</blockquote>\n</li>\n<li><p>尽量避免使用存在兼容性及消耗资源的方法或属性。</p>\n<blockquote>\n<p>不要使用with，void，evil，eval_r，innerText</p>\n</blockquote>\n</li>\n<li><p>注重HTML分离, 减小reflow, 注重性能。</p>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"注释规范：\"><a href=\"#注释规范：\" class=\"headerlink\" title=\"注释规范：\"></a>注释规范：</h1><blockquote>\n<ul>\n<li>JAVASCRIPT、CSS文件注释需要标明作者、文件版本、创建/修改时间、重大版本修改记录、函数描述、文件版本、创建或者修改时间、功能、作者等信息。<blockquote>\n<p><code>/* * 注释块 */</code></p>\n</blockquote>\n</li>\n</ul>\n<p>中间可添加如下信息。</p>\n<blockquote>\n<p>@file 文件名<br>@addon 把一个函数标记为另一个函数的扩张，另一个函数的定义不在源文件中<br>@argument 用大括号中的自变量类型描述一个自变量<br>@author 函数/类作者的姓名<br>@base 如果类是继承得来，定义提供的类名称<br>@class 用来给一个类提供描述，不能用于构造器的文档中<br>@constructor 描述一个类的构造器<br>@deprecated 表示函数/类已被忽略<br>@exception 描述函数/类产生的一个错误<br>@exec @extends 表示派生出当前类的另一个类<br>@fileoverview 表示文档块将用于描述当前文件，这个标签应该放在其它任何标签之前<br>@final 指出函数/类<br>@ignore 让jsdoc忽视随后的代码<br>@link 类似于@link标签，用于连接许多其它页面<br>@member 定义随后的函数为提供的类名称的一个成员<br>@param 用大括号中的参数类型描述一个参数<br>@private 表示函数/类为私有，不应包含在生成的文档中<br>@requires 表示需要另一个函数/类<br>@return 描述一个函数的返回值<br>@see 连接到另一个函数/类<br>@throws 描述函数/类可能产生的错误<br>@type 指定函数/成员的返回类型<br>@version 函数/类的版本号</p>\n</blockquote>\n<h3 id=\"参考和借鉴了大家的经验，收集整理了这一篇开发规范，感谢所有的原作者\"><a href=\"#参考和借鉴了大家的经验，收集整理了这一篇开发规范，感谢所有的原作者\" class=\"headerlink\" title=\"参考和借鉴了大家的经验，收集整理了这一篇开发规范，感谢所有的原作者\"></a>参考和借鉴了大家的经验，收集整理了这一篇开发规范，感谢所有的原作者</h3></blockquote>\n","categories":[],"tags":[{"name":"前端开发规范","path":"api/tags/前端开发规范.json"}]}